{{ define "item" }}
              {{ $item := .LocalItem }}
              {{ $layout := .Layout }}
              {{ $layoutType := .LayoutType }}
              {{ $charName := .CharName }}

              {{ with $item }}
                {{ $width := .Width }}
                {{ $height := .Height }}
                {{ $visibility := "" }}
                {{ $swap := "" }}
                {{ if eq $layoutType "inventory" }}
                  {{ if or (eq .InventoryId "Offhand") (eq .InventoryId "Weapon") }}
                    {{ $width = 2 }}
                    {{ $height = 4 }}
                    {{ $swap = "swap2" }}
                    {{ $visibility = "block" }}
                  {{ end }}
                  {{ if or (eq .InventoryId "Offhand2") (eq .InventoryId "Weapon2") }}
                    {{ $width = 2 }}
                    {{ $height = 4 }}
                    {{ $swap = "swap1" }}
                    {{ $visibility = "none" }}
                  {{ end }}
                {{ end }}
              <div id="item-{{ .Id }}" class="newItemContainer iW{{ .Width }} iH{{ .Height }} itemRendered itemPlaced ipW{{ $width }} ipH{{ $height }} {{ if not .IsIdentified }}unidentified{{ end }} {{ $swap }}"
                style="position: absolute; left: {{ DeducePosX $layoutType .InventoryId $layout .X .Y }}px; top: {{ DeducePosY $layoutType .InventoryId $layout .X .Y }}px; display: {{ $visibility }};"
                data-sell="{{ SellDescription . $charName }}"
                data-desc="{{ template "itemtext" $item }}"
                onclick="openModal('item-{{ .Id }}', '{{ .Name }}', '{{ .Type }}')">
                <div class="socketPopups"></div>
                <div class="iconContainer">
                  <div class="icon {{ if .IsElder }}elder{{ end }} {{ if .IsShaper }}shaper{{ end }}" {{ GenSpecialBackground . | attr }}>
                    <img src="{{ .Icon }}" alt="" />

                    {{ if .Sockets }}
                      <div class="sockets numSockets{{ len .Sockets}}" style="display: block;">
                      {{ $prev := -1 }}
                      {{ $socket := .Sockets }}
                      {{ $socketed := .SocketedItems }}
                      {{ range $idx, $elt := .Sockets}}

                        {{/* Check if current socket is in the same group has the previous one. */}}
                        {{ if ge $prev 0 }}
                          {{ if eq (index $socket $idx).GroupId (index $socket $prev).GroupId }}
                          <div class="socketLink socketLink{{ $prev }}"></div>
                          {{ end }}
                        {{ end }}

                        {{/* Generate id for tooltip + generated color + embed gem + check if socket has to be aligned on the right. */}}
                        <div {{ SocketedId $idx $socketed }}
                          class="socket {{ SocketedClass $idx $socketed }} {{ ColorToSocketClass $elt.Color }} {{ SocketRight $idx }}" alt="{{ .GroupId }}">
                        </div>

                        {{ $prev = $idx }}
                      {{ end }}
                      </div>
                    {{ end }}

                    {{ if (gt .StackSize 0) }}
                    <span class="stackSize">{{ .StackSize }}</span>
                    {{ end }}
                  </div>
                </div>
              </div>
              {{ end }}
{{ end }}

{{ define "items" }}
            {{ $layout := .CurrencyLayout }}
            {{ $layoutType := "" }}
            {{ if .CurrencyLayout }}
              {{ $layout = .CurrencyLayout }}
              {{ $layoutType = "currency" }}
              <div class="stashTabContents poeScroll currencyStash" style="border-color: rgb(124, 84, 54);">
            {{ else if .FragmentLayout }}
              {{ $layout = .FragmentLayout }}
              {{ $layoutType = "fragment" }}
              <div class="stashTabContents poeScroll fragmentStash" style="border-color: rgb(124, 84, 54);">
            {{ else if .MapLayout }}
              {{ $layout = .MapLayout }}
              {{ $layoutType = "map" }}
              <div class="stashTabContents poeScroll mapStash" style="border-color: rgb(124, 84, 54);">
            {{ else }}
              {{ $layoutType = "" }}
              <div class="stashTabContents poeScroll" style="border-color: rgb(124, 84, 54);">
            {{ end }}

            {{ range .Items }}
             {{ template "item" dict "LocalItem" . "Layout" $layout "LayoutType" $layoutType "CharName" "NoCharNameNeededHere" }}
            {{ end }}
            </div>
{{ end }}
